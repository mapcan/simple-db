package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple child1next;
    private Tuple child2next;
    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.child1next = null;
        this.child2next = null;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        child1.open();
        child2.open();
    }

    public void close() {
        child1.close();
        child2.close();
        child1next = null;
        child2next = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        child1next = null;
        child2next = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (child1next == null) {
            if (!child1.hasNext()) {
                return null;
            }
            child1next = child1.next();
            if (child1next == null) {
                return null;
            }
        }
        if (!child2.hasNext()) {
            child2.rewind();
            child1next = null;
            return fetchNext();
        }
        child2next = child2.next();
        if (child2next == null) {
            child2.rewind();
            child1next = null;
            return fetchNext();
        }
        if (!p.filter(child1next, child2next)) {
            return fetchNext();
        }
        TupleDesc td = getTupleDesc();
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        Tuple next = new Tuple(td);
        for (int i = 0; i < td1.numFields(); i++) {
            next.setField(i, child1next.getField(i));
        }
        for (int i = 0; i < td2.numFields(); i++) {
            next.setField(td1.numFields()+i, child2next.getField(i));
        }
        return next;
    }

    public DbIterator[] getChildren() {
        return new DbIterator[]{child1, child2};
    }

    public void setChildren(DbIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }

    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }
}
